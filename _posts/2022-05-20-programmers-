```java
import java.util.LinkedList;
import java.util.Queue;
import java.lang.Math;

class Solution {
    static boolean[] visit;
    Queue queue = new LinkedList<>();
    
    private void bfs(int n, int start, int[][] edge) {
        visit[start] = true;
        
        for (int[] node : edge)
        {
            if (node[0] == start && !visit[node[1]])
            {
                visit[node[1]] = true;
                queue.add(node[1]);
            }
            else if (node[1] == start && !visit[node[0]])
            {
                visit[node[0]] = true;
                queue.add(node[0]);
            }
        }
        
        return;
    }
    
    public int solution(int n, int[][] edge)
    {
        int answer = 0;
        int qsize = 0;
        visit = new boolean[n+1][n+1];
        
        bfs(n, 1, edge); // 1부터 시작
        
        while(!queue.isEmpty())
        {
            qsize = queue.size();
            answer = Math.max(answer, qsize);
            
            for (int idx = 0; idx < qsize; idx++)
            {
                bfs(n, queue.poll(), edge);
            }
        }

        return answer;
    }
}
        
```
